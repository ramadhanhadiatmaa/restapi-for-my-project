name: CI
on:
  push:
    branches: ["stage"]

jobs:
  build:
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up environment variables
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          echo "DB_HOST=${DB_HOST}" >> .env
          echo "DB_PORT=${DB_PORT}" >> .env
          echo "DB_USER=${DB_USER}" >> .env
          echo "DB_PASS=${DB_PASS}" >> .env
          echo "DB_NAME=${DB_NAME}" >> .env

      - name: Connect to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/api-csm:latest

  deployment:
    needs: build
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER }}
          username: ${{ secrets.SERVER_USERNAME}}
          password: ${{ secrets.SERVER_PASSWORD}}
          port: ${{ secrets.SERVER_PORT  }}
          script: |
            whoami
            docker stop apicsm || true && docker rm apicsm || true
            docker pull ${{ vars.IMAGE_NAME }}
            docker run -d -p 8080:8080 --name ${{ vars.CONTAINER_NAME }} ${{ vars.IMAGE_NAME }}
